// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../../../domain/entity/bus_stop_entity.dart';
import '../../../../domain/entity/route_entity.dart';
import '../../../../domain/entity/shift_scheduler_entity.dart';
import '../../../../domain/entity/sumary_schedule_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5572128848681833480),
      name: 'BusStopEntity',
      lastPropertyId: const obx_int.IdUid(14, 826441043104099918),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7502656264110792574),
            name: 'routeId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 9178572205151682886),
            name: 'nameZh',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5920027045941040366),
            name: 'seqNo',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1721754923174897771),
            name: 'pgp',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9098297286530728226),
            name: 'terminal',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8299772259802828037),
            name: 'districtId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5422886127877195881),
            name: 'goBack',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2417663915337966802),
            name: 'latitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2766240152690838411),
            name: 'longitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5460086687114773545),
            name: 'extVoiceNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8838309262769320771),
            name: 'sid',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5214863171479129451),
            name: 'ivrNo',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 2537072939772868923),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 826441043104099918),
            name: 'totalCount',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 2569887251157679718),
      name: 'RouteEntity',
      lastPropertyId: const obx_int.IdUid(13, 6043528938377256168),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7532857241196733518),
            name: 'providerId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 119363813908261140),
            name: 'nameZh',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8891546646709796469),
            name: 'dDesc',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 746594723454022955),
            name: 'departureZh',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5064768558006940122),
            name: 'destinationZh',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8350235889217165158),
            name: 'gxCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2217738039845126627),
            name: 'routeMapImageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8622005669186621042),
            name: 'timeScheduleUrlWeight',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2580489037864886376),
            name: 'opType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3868659097779025202),
            name: 'code',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5932857752051927685),
            name: 'cyberRouteId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 2239653709686965983),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 6043528938377256168),
            name: 'totalCount',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1924459827300972020),
      name: 'ShiftSchedulerEntity',
      lastPropertyId: const obx_int.IdUid(11, 1323221477275705175),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5741673132365121226),
            name: 'localId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2696365307964522846),
            name: 'id',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8738919055348533507),
            name: 'carId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9218630403460715253),
            name: 'driverLicense',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3177005099359972245),
            name: 'goBack',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6068919957852086896),
            name: 'routeId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 787508785241717215),
            name: 'scheduleId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6371051745682202967),
            name: 'routeCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4612036304261981259),
            name: 'scheduleTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 652399805691881137),
            name: 'sellerIdCard',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1323221477275705175),
            name: 'node',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 1578075682486477185),
      name: 'SummaryScheduleEntity',
      lastPropertyId: const obx_int.IdUid(17, 2176824896778438592),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6318944593589912135),
            name: 'ticketId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8998123038499798962),
            name: 'routeId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9180853443020133973),
            name: 'scheduleId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1345480814976546136),
            name: 'serialTo',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 806541167783526618),
            name: 'totalAmount',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2017557280730257295),
            name: 'totalQuantity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8197598392268099461),
            name: 'goBack',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5841280878880209792),
            name: 'carId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1638802726541848330),
            name: 'driverLicense',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1858545303148273685),
            name: 'scheduleTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8172272902089595553),
            name: 'node',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7602120046850238046),
            name: 'sellerIdCard',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 480393348967547019),
            name: 'isSync',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 2526891488446740895),
            name: 'syncDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 8186337082386453644),
            name: 'shiftSchedulerId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 7818390062268395652),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 2176824896778438592),
            name: 'totalCount',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 1578075682486477185),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    BusStopEntity: obx_int.EntityDefinition<BusStopEntity>(
        model: _entities[0],
        toOneRelations: (BusStopEntity object) => [],
        toManyRelations: (BusStopEntity object) => {},
        getId: (BusStopEntity object) => object.id,
        setId: (BusStopEntity object, int id) {
          object.id = id;
        },
        objectToFB: (BusStopEntity object, fb.Builder fbb) {
          final nameZhOffset =
              object.nameZh == null ? null : fbb.writeString(object.nameZh!);
          final pgpOffset =
              object.pgp == null ? null : fbb.writeString(object.pgp!);
          final terminalOffset = object.terminal == null
              ? null
              : fbb.writeString(object.terminal!);
          final districtIdOffset = object.districtId == null
              ? null
              : fbb.writeString(object.districtId!);
          final extVoiceNoOffset = object.extVoiceNo == null
              ? null
              : fbb.writeString(object.extVoiceNo!);
          fbb.startTable(15);
          fbb.addInt64(0, object.routeId);
          fbb.addOffset(1, nameZhOffset);
          fbb.addInt64(2, object.seqNo);
          fbb.addOffset(3, pgpOffset);
          fbb.addOffset(4, terminalOffset);
          fbb.addOffset(5, districtIdOffset);
          fbb.addInt64(6, object.goBack);
          fbb.addFloat64(7, object.latitude);
          fbb.addFloat64(8, object.longitude);
          fbb.addOffset(9, extVoiceNoOffset);
          fbb.addInt64(10, object.sid);
          fbb.addInt64(11, object.ivrNo);
          fbb.addInt64(12, object.id ?? 0);
          fbb.addInt64(13, object.totalCount);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final routeIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final nameZhParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final seqNoParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final pgpParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final terminalParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final districtIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final goBackParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final latitudeParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 18);
          final longitudeParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 20);
          final extVoiceNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final sidParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24);
          final ivrNoParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final totalCountParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30);
          final object = BusStopEntity(
              routeId: routeIdParam,
              nameZh: nameZhParam,
              seqNo: seqNoParam,
              pgp: pgpParam,
              terminal: terminalParam,
              districtId: districtIdParam,
              goBack: goBackParam,
              latitude: latitudeParam,
              longitude: longitudeParam,
              extVoiceNo: extVoiceNoParam,
              sid: sidParam,
              ivrNo: ivrNoParam,
              id: idParam,
              totalCount: totalCountParam);

          return object;
        }),
    RouteEntity: obx_int.EntityDefinition<RouteEntity>(
        model: _entities[1],
        toOneRelations: (RouteEntity object) => [],
        toManyRelations: (RouteEntity object) => {},
        getId: (RouteEntity object) => object.id,
        setId: (RouteEntity object, int id) {
          object.id = id;
        },
        objectToFB: (RouteEntity object, fb.Builder fbb) {
          final providerIdOffset = object.providerId == null
              ? null
              : fbb.writeString(object.providerId!);
          final nameZhOffset =
              object.nameZh == null ? null : fbb.writeString(object.nameZh!);
          final dDescOffset =
              object.dDesc == null ? null : fbb.writeString(object.dDesc!);
          final departureZhOffset = object.departureZh == null
              ? null
              : fbb.writeString(object.departureZh!);
          final destinationZhOffset = object.destinationZh == null
              ? null
              : fbb.writeString(object.destinationZh!);
          final gxCodeOffset =
              object.gxCode == null ? null : fbb.writeString(object.gxCode!);
          final routeMapImageUrlOffset = object.routeMapImageUrl == null
              ? null
              : fbb.writeString(object.routeMapImageUrl!);
          final timeScheduleUrlWeightOffset =
              object.timeScheduleUrlWeight == null
                  ? null
                  : fbb.writeString(object.timeScheduleUrlWeight!);
          final opTypeOffset =
              object.opType == null ? null : fbb.writeString(object.opType!);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          final cyberRouteIdOffset = object.cyberRouteId == null
              ? null
              : fbb.writeString(object.cyberRouteId!);
          fbb.startTable(14);
          fbb.addOffset(0, providerIdOffset);
          fbb.addOffset(1, nameZhOffset);
          fbb.addOffset(2, dDescOffset);
          fbb.addOffset(3, departureZhOffset);
          fbb.addOffset(4, destinationZhOffset);
          fbb.addOffset(5, gxCodeOffset);
          fbb.addOffset(6, routeMapImageUrlOffset);
          fbb.addOffset(7, timeScheduleUrlWeightOffset);
          fbb.addOffset(8, opTypeOffset);
          fbb.addOffset(9, codeOffset);
          fbb.addOffset(10, cyberRouteIdOffset);
          fbb.addInt64(11, object.id ?? 0);
          fbb.addInt64(12, object.totalCount);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final providerIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 4);
          final nameZhParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final dDescParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final departureZhParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final destinationZhParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final gxCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final routeMapImageUrlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final timeScheduleUrlWeightParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final opTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final cyberRouteIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26);
          final totalCountParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final object = RouteEntity(
              providerId: providerIdParam,
              nameZh: nameZhParam,
              dDesc: dDescParam,
              departureZh: departureZhParam,
              destinationZh: destinationZhParam,
              gxCode: gxCodeParam,
              routeMapImageUrl: routeMapImageUrlParam,
              timeScheduleUrlWeight: timeScheduleUrlWeightParam,
              opType: opTypeParam,
              code: codeParam,
              cyberRouteId: cyberRouteIdParam,
              id: idParam,
              totalCount: totalCountParam);

          return object;
        }),
    ShiftSchedulerEntity: obx_int.EntityDefinition<ShiftSchedulerEntity>(
        model: _entities[2],
        toOneRelations: (ShiftSchedulerEntity object) => [],
        toManyRelations: (ShiftSchedulerEntity object) => {},
        getId: (ShiftSchedulerEntity object) => object.localId,
        setId: (ShiftSchedulerEntity object, int id) {
          object.localId = id;
        },
        objectToFB: (ShiftSchedulerEntity object, fb.Builder fbb) {
          final carIdOffset =
              object.carId == null ? null : fbb.writeString(object.carId!);
          final driverLicenseOffset = object.driverLicense == null
              ? null
              : fbb.writeString(object.driverLicense!);
          final goBackOffset =
              object.goBack == null ? null : fbb.writeString(object.goBack!);
          final scheduleIdOffset = object.scheduleId == null
              ? null
              : fbb.writeString(object.scheduleId!);
          final routeCodeOffset = object.routeCode == null
              ? null
              : fbb.writeString(object.routeCode!);
          final scheduleTimeOffset = object.scheduleTime == null
              ? null
              : fbb.writeString(object.scheduleTime!);
          final sellerIdCardOffset = object.sellerIdCard == null
              ? null
              : fbb.writeString(object.sellerIdCard!);
          final nodeOffset =
              object.node == null ? null : fbb.writeString(object.node!);
          fbb.startTable(12);
          fbb.addInt64(0, object.localId ?? 0);
          fbb.addInt64(1, object.id);
          fbb.addOffset(2, carIdOffset);
          fbb.addOffset(3, driverLicenseOffset);
          fbb.addOffset(4, goBackOffset);
          fbb.addInt64(5, object.routeId);
          fbb.addOffset(6, scheduleIdOffset);
          fbb.addOffset(7, routeCodeOffset);
          fbb.addOffset(8, scheduleTimeOffset);
          fbb.addOffset(9, sellerIdCardOffset);
          fbb.addOffset(10, nodeOffset);
          fbb.finish(fbb.endTable());
          return object.localId ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final localIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final carIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final driverLicenseParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final goBackParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final routeIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final scheduleIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final routeCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final scheduleTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final sellerIdCardParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final nodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final object = ShiftSchedulerEntity(
              localIdParam,
              idParam,
              carIdParam,
              driverLicenseParam,
              goBackParam,
              routeIdParam,
              scheduleIdParam,
              routeCodeParam,
              scheduleTimeParam,
              sellerIdCardParam,
              nodeParam);

          return object;
        }),
    SummaryScheduleEntity: obx_int.EntityDefinition<SummaryScheduleEntity>(
        model: _entities[3],
        toOneRelations: (SummaryScheduleEntity object) => [],
        toManyRelations: (SummaryScheduleEntity object) => {},
        getId: (SummaryScheduleEntity object) => object.id,
        setId: (SummaryScheduleEntity object, int id) {
          object.id = id;
        },
        objectToFB: (SummaryScheduleEntity object, fb.Builder fbb) {
          final scheduleIdOffset = object.scheduleId == null
              ? null
              : fbb.writeString(object.scheduleId!);
          final carIdOffset =
              object.carId == null ? null : fbb.writeString(object.carId!);
          final driverLicenseOffset = object.driverLicense == null
              ? null
              : fbb.writeString(object.driverLicense!);
          final nodeOffset =
              object.node == null ? null : fbb.writeString(object.node!);
          final sellerIdCardOffset = object.sellerIdCard == null
              ? null
              : fbb.writeString(object.sellerIdCard!);
          fbb.startTable(18);
          fbb.addInt64(0, object.ticketId);
          fbb.addInt64(1, object.routeId);
          fbb.addOffset(2, scheduleIdOffset);
          fbb.addInt64(3, object.serialTo);
          fbb.addInt64(4, object.totalAmount);
          fbb.addInt64(5, object.totalQuantity);
          fbb.addInt64(6, object.goBack);
          fbb.addOffset(7, carIdOffset);
          fbb.addOffset(8, driverLicenseOffset);
          fbb.addInt64(9, object.scheduleTime?.millisecondsSinceEpoch);
          fbb.addOffset(10, nodeOffset);
          fbb.addOffset(11, sellerIdCardOffset);
          fbb.addInt64(12, object.isSync);
          fbb.addInt64(13, object.syncDate?.millisecondsSinceEpoch);
          fbb.addInt64(14, object.shiftSchedulerId);
          fbb.addInt64(15, object.id ?? 0);
          fbb.addInt64(16, object.totalCount);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final scheduleTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final syncDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30);
          final ticketIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final routeIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final scheduleIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final serialToParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final totalAmountParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final totalQuantityParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final goBackParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final carIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final driverLicenseParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final scheduleTimeParam = scheduleTimeValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(scheduleTimeValue);
          final nodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final sellerIdCardParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final isSyncParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final syncDateParam = syncDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(syncDateValue);
          final shiftSchedulerIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 32);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 34);
          final totalCountParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 36);
          final object = SummaryScheduleEntity(
              ticketId: ticketIdParam,
              routeId: routeIdParam,
              scheduleId: scheduleIdParam,
              serialTo: serialToParam,
              totalAmount: totalAmountParam,
              totalQuantity: totalQuantityParam,
              goBack: goBackParam,
              carId: carIdParam,
              driverLicense: driverLicenseParam,
              scheduleTime: scheduleTimeParam,
              node: nodeParam,
              sellerIdCard: sellerIdCardParam,
              isSync: isSyncParam,
              syncDate: syncDateParam,
              shiftSchedulerId: shiftSchedulerIdParam,
              id: idParam,
              totalCount: totalCountParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [BusStopEntity] entity fields to define ObjectBox queries.
class BusStopEntity_ {
  /// See [BusStopEntity.routeId].
  static final routeId =
      obx.QueryIntegerProperty<BusStopEntity>(_entities[0].properties[0]);

  /// See [BusStopEntity.nameZh].
  static final nameZh =
      obx.QueryStringProperty<BusStopEntity>(_entities[0].properties[1]);

  /// See [BusStopEntity.seqNo].
  static final seqNo =
      obx.QueryIntegerProperty<BusStopEntity>(_entities[0].properties[2]);

  /// See [BusStopEntity.pgp].
  static final pgp =
      obx.QueryStringProperty<BusStopEntity>(_entities[0].properties[3]);

  /// See [BusStopEntity.terminal].
  static final terminal =
      obx.QueryStringProperty<BusStopEntity>(_entities[0].properties[4]);

  /// See [BusStopEntity.districtId].
  static final districtId =
      obx.QueryStringProperty<BusStopEntity>(_entities[0].properties[5]);

  /// See [BusStopEntity.goBack].
  static final goBack =
      obx.QueryIntegerProperty<BusStopEntity>(_entities[0].properties[6]);

  /// See [BusStopEntity.latitude].
  static final latitude =
      obx.QueryDoubleProperty<BusStopEntity>(_entities[0].properties[7]);

  /// See [BusStopEntity.longitude].
  static final longitude =
      obx.QueryDoubleProperty<BusStopEntity>(_entities[0].properties[8]);

  /// See [BusStopEntity.extVoiceNo].
  static final extVoiceNo =
      obx.QueryStringProperty<BusStopEntity>(_entities[0].properties[9]);

  /// See [BusStopEntity.sid].
  static final sid =
      obx.QueryIntegerProperty<BusStopEntity>(_entities[0].properties[10]);

  /// See [BusStopEntity.ivrNo].
  static final ivrNo =
      obx.QueryIntegerProperty<BusStopEntity>(_entities[0].properties[11]);

  /// See [BusStopEntity.id].
  static final id =
      obx.QueryIntegerProperty<BusStopEntity>(_entities[0].properties[12]);

  /// See [BusStopEntity.totalCount].
  static final totalCount =
      obx.QueryIntegerProperty<BusStopEntity>(_entities[0].properties[13]);
}

/// [RouteEntity] entity fields to define ObjectBox queries.
class RouteEntity_ {
  /// See [RouteEntity.providerId].
  static final providerId =
      obx.QueryStringProperty<RouteEntity>(_entities[1].properties[0]);

  /// See [RouteEntity.nameZh].
  static final nameZh =
      obx.QueryStringProperty<RouteEntity>(_entities[1].properties[1]);

  /// See [RouteEntity.dDesc].
  static final dDesc =
      obx.QueryStringProperty<RouteEntity>(_entities[1].properties[2]);

  /// See [RouteEntity.departureZh].
  static final departureZh =
      obx.QueryStringProperty<RouteEntity>(_entities[1].properties[3]);

  /// See [RouteEntity.destinationZh].
  static final destinationZh =
      obx.QueryStringProperty<RouteEntity>(_entities[1].properties[4]);

  /// See [RouteEntity.gxCode].
  static final gxCode =
      obx.QueryStringProperty<RouteEntity>(_entities[1].properties[5]);

  /// See [RouteEntity.routeMapImageUrl].
  static final routeMapImageUrl =
      obx.QueryStringProperty<RouteEntity>(_entities[1].properties[6]);

  /// See [RouteEntity.timeScheduleUrlWeight].
  static final timeScheduleUrlWeight =
      obx.QueryStringProperty<RouteEntity>(_entities[1].properties[7]);

  /// See [RouteEntity.opType].
  static final opType =
      obx.QueryStringProperty<RouteEntity>(_entities[1].properties[8]);

  /// See [RouteEntity.code].
  static final code =
      obx.QueryStringProperty<RouteEntity>(_entities[1].properties[9]);

  /// See [RouteEntity.cyberRouteId].
  static final cyberRouteId =
      obx.QueryStringProperty<RouteEntity>(_entities[1].properties[10]);

  /// See [RouteEntity.id].
  static final id =
      obx.QueryIntegerProperty<RouteEntity>(_entities[1].properties[11]);

  /// See [RouteEntity.totalCount].
  static final totalCount =
      obx.QueryIntegerProperty<RouteEntity>(_entities[1].properties[12]);
}

/// [ShiftSchedulerEntity] entity fields to define ObjectBox queries.
class ShiftSchedulerEntity_ {
  /// See [ShiftSchedulerEntity.localId].
  static final localId = obx.QueryIntegerProperty<ShiftSchedulerEntity>(
      _entities[2].properties[0]);

  /// See [ShiftSchedulerEntity.id].
  static final id = obx.QueryIntegerProperty<ShiftSchedulerEntity>(
      _entities[2].properties[1]);

  /// See [ShiftSchedulerEntity.carId].
  static final carId =
      obx.QueryStringProperty<ShiftSchedulerEntity>(_entities[2].properties[2]);

  /// See [ShiftSchedulerEntity.driverLicense].
  static final driverLicense =
      obx.QueryStringProperty<ShiftSchedulerEntity>(_entities[2].properties[3]);

  /// See [ShiftSchedulerEntity.goBack].
  static final goBack =
      obx.QueryStringProperty<ShiftSchedulerEntity>(_entities[2].properties[4]);

  /// See [ShiftSchedulerEntity.routeId].
  static final routeId = obx.QueryIntegerProperty<ShiftSchedulerEntity>(
      _entities[2].properties[5]);

  /// See [ShiftSchedulerEntity.scheduleId].
  static final scheduleId =
      obx.QueryStringProperty<ShiftSchedulerEntity>(_entities[2].properties[6]);

  /// See [ShiftSchedulerEntity.routeCode].
  static final routeCode =
      obx.QueryStringProperty<ShiftSchedulerEntity>(_entities[2].properties[7]);

  /// See [ShiftSchedulerEntity.scheduleTime].
  static final scheduleTime =
      obx.QueryStringProperty<ShiftSchedulerEntity>(_entities[2].properties[8]);

  /// See [ShiftSchedulerEntity.sellerIdCard].
  static final sellerIdCard =
      obx.QueryStringProperty<ShiftSchedulerEntity>(_entities[2].properties[9]);

  /// See [ShiftSchedulerEntity.node].
  static final node = obx.QueryStringProperty<ShiftSchedulerEntity>(
      _entities[2].properties[10]);
}

/// [SummaryScheduleEntity] entity fields to define ObjectBox queries.
class SummaryScheduleEntity_ {
  /// See [SummaryScheduleEntity.ticketId].
  static final ticketId = obx.QueryIntegerProperty<SummaryScheduleEntity>(
      _entities[3].properties[0]);

  /// See [SummaryScheduleEntity.routeId].
  static final routeId = obx.QueryIntegerProperty<SummaryScheduleEntity>(
      _entities[3].properties[1]);

  /// See [SummaryScheduleEntity.scheduleId].
  static final scheduleId = obx.QueryStringProperty<SummaryScheduleEntity>(
      _entities[3].properties[2]);

  /// See [SummaryScheduleEntity.serialTo].
  static final serialTo = obx.QueryIntegerProperty<SummaryScheduleEntity>(
      _entities[3].properties[3]);

  /// See [SummaryScheduleEntity.totalAmount].
  static final totalAmount = obx.QueryIntegerProperty<SummaryScheduleEntity>(
      _entities[3].properties[4]);

  /// See [SummaryScheduleEntity.totalQuantity].
  static final totalQuantity = obx.QueryIntegerProperty<SummaryScheduleEntity>(
      _entities[3].properties[5]);

  /// See [SummaryScheduleEntity.goBack].
  static final goBack = obx.QueryIntegerProperty<SummaryScheduleEntity>(
      _entities[3].properties[6]);

  /// See [SummaryScheduleEntity.carId].
  static final carId = obx.QueryStringProperty<SummaryScheduleEntity>(
      _entities[3].properties[7]);

  /// See [SummaryScheduleEntity.driverLicense].
  static final driverLicense = obx.QueryStringProperty<SummaryScheduleEntity>(
      _entities[3].properties[8]);

  /// See [SummaryScheduleEntity.scheduleTime].
  static final scheduleTime =
      obx.QueryDateProperty<SummaryScheduleEntity>(_entities[3].properties[9]);

  /// See [SummaryScheduleEntity.node].
  static final node = obx.QueryStringProperty<SummaryScheduleEntity>(
      _entities[3].properties[10]);

  /// See [SummaryScheduleEntity.sellerIdCard].
  static final sellerIdCard = obx.QueryStringProperty<SummaryScheduleEntity>(
      _entities[3].properties[11]);

  /// See [SummaryScheduleEntity.isSync].
  static final isSync = obx.QueryIntegerProperty<SummaryScheduleEntity>(
      _entities[3].properties[12]);

  /// See [SummaryScheduleEntity.syncDate].
  static final syncDate =
      obx.QueryDateProperty<SummaryScheduleEntity>(_entities[3].properties[13]);

  /// See [SummaryScheduleEntity.shiftSchedulerId].
  static final shiftSchedulerId =
      obx.QueryIntegerProperty<SummaryScheduleEntity>(
          _entities[3].properties[14]);

  /// See [SummaryScheduleEntity.id].
  static final id = obx.QueryIntegerProperty<SummaryScheduleEntity>(
      _entities[3].properties[15]);

  /// See [SummaryScheduleEntity.totalCount].
  static final totalCount = obx.QueryIntegerProperty<SummaryScheduleEntity>(
      _entities[3].properties[16]);
}
